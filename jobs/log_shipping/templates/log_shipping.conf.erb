module(load="imfile")
#$WorkDirectory /var/vcap/sys/run/rsyslogd
#$WorkDirectory /var/vcap/sys/rsyslog/buffered # where messages should be buffered on disk

$ActionResumeRetryCount -1              # Try until the server becomes available
$ActionQueueType LinkedList             # Allocate on-demand
$ActionQueueFileName agg_backlog        # Spill to disk if queue is full
$ActionQueueMaxDiskSpace 32m            # Max size for disk queue
$ActionQueueLowWaterMark 2000           # Num messages. Assuming avg size of 512B, this is 1MiB.
$ActionQueueHighWaterMark 8000          # Num messages. Assuming avg size of 512B, this is 4MiB. (If this is reached, messages will spill to disk until the low watermark is reached).
$ActionQueueTimeoutEnqueue 0            # Discard messages if the queue + disk is full
$ActionQueueSaveOnShutdown on           # Save in-memory data to disk if rsyslog shuts down


<%
   def discover_external_ip
     networks = spec.networks.marshal_dump
     _, network = networks.find do |_name, network_spec|
       network_spec.default
     end
     if !network
       _, network = networks.first
     end
     if !network
       raise "Could not determine IP via network spec: #{networks}"
     end
     network.ip
   end
   ip = discover_external_ip
%>

template(name="fileForwarding" type="list") {
  constant(value="<")
  property(name="pri")
  constant(value=">")
  constant(value="1 ")
  property(name="timestamp" dateFormat="rfc3339")
  constant(value=" <%= ip %> ")
  property(name="programname")
  constant(value=" - - [- job=<%= name %> index=<%= index %>] ")
  property(name="msg")
}

<% if_p("syslog_daemon_config.address", "syslog_daemon_config.port", "syslog_daemon_config.transport") do |address, port, transport| %>

<% if transport == "relp" %>
$ModLoad omrelp
#*.* :omrelp:<%= address %>:<%= port %>;CfLogTemplate
ruleset(name="ToMonitor") {
  action(type="omrelp" Target="<%= address %>" Port="<%= port %>" Template="fileForwarding")
}
<% elsif transport == "udp" %>
#*.* @<%= address %>:<%= port %>;CfLogTemplate
ruleset(name="ToMonitor") {
  action(type="omfwd" Target="<%= address %>" Port="<%= port %>" Protocol="udp" Template="fileForwarding")
}
<% elsif transport == "tcp" %>
ruleset(name="ToMonitor") {
  action(type="omfwd" Target="<%= address %>" Port="<%= port %>" Protocol="tcp" Template="fileForwarding")
}
#*.* @@<%= address %>:<%= port %>;CfLogTemplate
<% else %>
#only RELP, UDP, and TCP are supported
<% end %>

<% end  %>

# Log vcap messages locally, too
#$template VcapComponentLogFile, "/var/log/%programname:6:$%/%programname:6:$%.log"
#$template VcapComponentLogFormat, "%timegenerated% %syslogseverity-text% -- %msg%\n"
#:programname, startswith, "vcap." -?VcapComponentLogFile;VcapComponentLogFormat

<% if p('log_shipping.disable_vcap_syslog') %>
# Prevent them from reaching anywhere else
:programname, startswith, "vcap." ~
<% end %>
